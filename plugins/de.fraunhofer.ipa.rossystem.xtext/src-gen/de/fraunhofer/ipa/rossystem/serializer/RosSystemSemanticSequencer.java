/*
 * generated by Xtext 2.13.0
 */
package de.fraunhofer.ipa.rossystem.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.rossystem.services.RosSystemGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rossystem.RosSystem;
import rossystem.RossystemPackage;
import rossystem.ServiceConnection;
import rossystem.TopicConnection;

@SuppressWarnings("all")
public class RosSystemSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RosSystemGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RossystemPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RossystemPackage.ROS_SYSTEM:
				sequence_RosSystem(context, (RosSystem) semanticObject); 
				return; 
			case RossystemPackage.SERVICE_CONNECTION:
				sequence_ServiceConnection(context, (ServiceConnection) semanticObject); 
				return; 
			case RossystemPackage.TOPIC_CONNECTION:
				sequence_TopicConnection(context, (TopicConnection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     RosSystem returns RosSystem
	 *
	 * Constraint:
	 *     (
	 *         Name=EString? 
	 *         (RosComponent+=[ComponentInterface|EString] RosComponent+=[ComponentInterface|EString]*)? 
	 *         (TopicConnections+=TopicConnection TopicConnections+=TopicConnection*)? 
	 *         (ServiceConnections+=ServiceConnection ServiceConnections+=ServiceConnection*)?
	 *     )
	 */
	protected void sequence_RosSystem(ISerializationContext context, RosSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceConnection returns ServiceConnection
	 *
	 * Constraint:
	 *     (FromSrv=[RosServiceServer|EString] ToSrv=[RosServiceClient|EString])
	 */
	protected void sequence_ServiceConnection(ISerializationContext context, ServiceConnection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RossystemPackage.Literals.SERVICE_CONNECTION__FROM_SRV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RossystemPackage.Literals.SERVICE_CONNECTION__FROM_SRV));
			if (transientValues.isValueTransient(semanticObject, RossystemPackage.Literals.SERVICE_CONNECTION__TO_SRV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RossystemPackage.Literals.SERVICE_CONNECTION__TO_SRV));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServiceConnectionAccess().getFromSrvRosServiceServerEStringParserRuleCall_3_0_1(), semanticObject.eGet(RossystemPackage.Literals.SERVICE_CONNECTION__FROM_SRV, false));
		feeder.accept(grammarAccess.getServiceConnectionAccess().getToSrvRosServiceClientEStringParserRuleCall_5_0_1(), semanticObject.eGet(RossystemPackage.Literals.SERVICE_CONNECTION__TO_SRV, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TopicConnection returns TopicConnection
	 *
	 * Constraint:
	 *     (FromTopic=[RosPublisher|EString] ToTopic=[RosSubscriber|EString])
	 */
	protected void sequence_TopicConnection(ISerializationContext context, TopicConnection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RossystemPackage.Literals.TOPIC_CONNECTION__FROM_TOPIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RossystemPackage.Literals.TOPIC_CONNECTION__FROM_TOPIC));
			if (transientValues.isValueTransient(semanticObject, RossystemPackage.Literals.TOPIC_CONNECTION__TO_TOPIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RossystemPackage.Literals.TOPIC_CONNECTION__TO_TOPIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTopicConnectionAccess().getFromTopicRosPublisherEStringParserRuleCall_3_0_1(), semanticObject.eGet(RossystemPackage.Literals.TOPIC_CONNECTION__FROM_TOPIC, false));
		feeder.accept(grammarAccess.getTopicConnectionAccess().getToTopicRosSubscriberEStringParserRuleCall_5_0_1(), semanticObject.eGet(RossystemPackage.Literals.TOPIC_CONNECTION__TO_TOPIC, false));
		feeder.finish();
	}
	
	
}
